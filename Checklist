
**Team Culture:**
- [X] Build team culture through non-work activities.
- [X] Regularly recognize and complement team members for their contributions.
- [X] Respectfully provide coaching to improve team effectiveness and efficiency.

**Communication:**
- [X] Set up and use communication tools and processes for effective and rapid information exchange.
- [X] Use these tools and processes regularly.
- [X] Establish and use remote communication tools and processes for distributed team interactions.
- [ ] Establish and use initiation and exit checklists.
- [X] Establish and use team policy statement.

**Testing:**
- [ ] Design and execute tests for confirming refined user stories match initial user stories.
- [ ] Design and execute tests for confirming design matches refined user stories.
- [ ] Design and execute tests for confirming implementation matches design.
- [ ] Create basic execution test capabilities.
- [ ] Create comprehensive test capabilities.
- [ ] Create and regularly use unit testing.
- [ ] Use a pull-request, code-review integration process for source changes.
- [ ] Automatically monitor and report code coverage.
- [ ] Use test-driven development.
- [ ] Measure and track software performance.

**Requirements and Analsys:**
- [X] Create user stories to capture basic product requirements.
- [ ] Analyze, refine, prioritize, select and convert user stories into tasks for development.
- [X] Organize tasks into Epic-story-task packages.
- [ ] Experiment with Job Stories as an alternative to User Stories (see https://maherou.github.io/files/CS317/CS317-Links).

**Design:**
- [X] Create basic design documents such as class, interaction and use case.
- [X] Write lightweight design documents
- [X] Write throw-away prototype code to explore high-risk design elements.

**Development:**
- [X] Create GitHub Isses describing major design and development tasks.
- [ ] Establish GitHub Project (Kanban) board.
- [ ] Actively manage work by tracking issues on your Kanban board.
- [X] Conduct regular project meetings to assess progress and manage schedule.
- [X] Use code formatting tool to assure uniform source code.
- [X] Identify and use a coding convention.
- [ ] Develop in-source comments that can be used to generate documentation, e.g., Javadoc or Doxygen.

**Product Release:**
- [ ] Create a unique and traceable release of your software product.
- [ ] Make a citable version (with DOI) of your code and make it available on Zenodo or Figshare.
- [ ] Generate user and developer documentation.
- [ ] Create product branding, e.g. logo family, catchphrase, product description.
